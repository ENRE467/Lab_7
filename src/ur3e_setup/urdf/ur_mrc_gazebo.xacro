<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="$(arg robot_model)_robot">
  
  <!--  This is a top-level xacro for UR3e arm stand in MRC RAL lab. -->

  <!--
    Import main macro.

    NOTE: this imports the Gazebo-wrapper main macro, NOT the regular
          xacro macro (which is hosted by ur_description).
  -->
  <xacro:include filename="$(find ur_gazebo)/urdf/ur_macro.xacro"/>

  <!--Declare arguments -->
  <xacro:arg name="joint_limit_params" default=""/>
  <xacro:arg name="physical_params" default=""/>
  <xacro:arg name="kinematics_params" default=""/>
  <xacro:arg name="visual_params" default=""/>
  <!--
    legal values:
      - hardware_interface/PositionJointInterface
      - hardware_interface/VelocityJointInterface
      - hardware_interface/EffortJointInterface

    NOTE: this value must correspond to the controller configured in the
          controller .yaml files in the 'config' directory.
  -->
  <xacro:arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface"/>
  <xacro:arg name="safety_limits" default="false"/>
  <xacro:arg name="safety_pos_margin" default="0.15"/>
  <xacro:arg name="safety_k_position" default="20"/>

  <!-- Instantiate the Gazebo robot and pass it all the required arguments. -->
  <xacro:ur_robot_gazebo
    prefix=""
    joint_limits_parameters_file="$(arg joint_limit_params)"
    kinematics_parameters_file="$(arg kinematics_params)"
    physical_parameters_file="$(arg physical_params)"
    visual_parameters_file="$(arg visual_params)"
    transmission_hw_interface="$(arg transmission_hw_interface)"
    safety_limits="$(arg safety_limits)"
    safety_pos_margin="$(arg safety_pos_margin)"
    safety_k_position="$(arg safety_k_position)"
  />

  <!--
    Attach the Gazebo model to Gazebo's world frame.

    Note: if you're looking to integrate a UR into a larger scene and need
    to add EEFs or other parts, DO NOT change this file or the 'world' link
    here. Create a NEW xacro instead and decide whether you need to add
    a 'world' link there.
  -->
  <link name="world"/>
  <joint name="world_joint" type="fixed">
    <parent link="world"/>
    <child link="base_link"/>
    <origin xyz="0 0 $(arg z_height)" rpy="0 0 0"/>
  </joint>

  <link name="tool0_controller"/>
  <joint name="tool_controller_fake_joint" type="fixed">
    <parent link="tool0"/>
    <child link="tool0_controller"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

  <!-- Adding table surface to avoid collisions -->
  <link name="mount_table_link">
      <visual>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
              <box size="1.12 0.805 0.766"/> 
          </geometry>
          <material name="orange">
              <color rgba="0.95 0.88 0.42 1.0"/>
          </material>
      </visual>
      <collision>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
              <box size="1.12 0.805 0.766"/> 
          </geometry>
      </collision>
      <inertial>
        <mass value="10.0" />
        <inertia  ixx="1.0" ixy="0.0"  ixz="0.0"  iyy="1.0"  iyz="0.0"  izz="1.0" />
      </inertial>
  </link>

  <joint name="mount_table_joint" type="fixed">
      <parent link="world" />
      <child link="mount_table_link" />
      <origin xyz="0 0.3125 0.383" rpy="0 0 0" />
  </joint>

</robot>
